// data interpolated from vertex program output
struct vertexIN
{
  float3 objectSpacePos : TEXCOORD1;
  float3 normal   : TEXCOORD2;
};

// OpenGL state
uniform float4x4 ModelViewInverse : state.matrix.modelview.inverse;
uniform float4 Light0Position : state.light[0].position;
uniform float4 Light0Ambient : state.light[0].ambient;
uniform float4 Light0Diffuse : state.light[0].diffuse;
uniform float4 Light0Specular : state.light[0].specular;
uniform float4 Light1Position : state.light[1].position;
uniform float4 Light1Ambient : state.light[1].ambient;
uniform float4 Light1Diffuse : state.light[1].diffuse;
uniform float4 Light1Specular : state.light[1].specular;
uniform float4 MaterialAmbient : state.material.ambient;
uniform float4 MaterialDiffuse : state.material.diffuse;
uniform float4 MaterialSpecular : state.material.specular;
uniform float MaterialShininess : state.material.shininess;


float4 main(vertexIN vIn,
            uniform float4 blackHolePosition, 
            uniform float time,
            uniform sampler2D texture0 : TEX0
            ) : COLOR
{
  //light calculation is done in object space (normals) 
  float3 P = vIn.objectSpacePos.xyz;
  float3 N = normalize(vIn.normal);

  //so we need to transform eye position 
  float3 ePos = (mul(ModelViewInverse, float4(0, 0, 0, 1))).xyz;
  
  //set lightPosition
  float3 lPos0 = (mul(ModelViewInverse, Light0Position)).xyz;
  float3 lPos1 = (mul(ModelViewInverse, Light1Position)).xyz;

  // compute ambient term
  float4 ambient0 = MaterialAmbient * Light0Ambient;
  float4 ambient1 = MaterialAmbient * Light1Ambient;

  // compute the diffuse term
  float3 L0 = normalize(lPos0.xyz - P);
  float diffuseLight0 = max(dot(L0, N), 0);
  float4 diffuse0 = MaterialDiffuse * Light0Diffuse * diffuseLight0;
  float3 L1 = normalize(lPos1.xyz - P);
  float diffuseLight1 = max(dot(L1, N), 0);
  float4 diffuse1 = MaterialDiffuse * Light1Diffuse * diffuseLight1;
  

  // compute the specular term
  float3 V = normalize(ePos - P);
  float3 H0 = normalize(L0 + V);
  float specularLight0 = pow(max(dot(H0, N), 0), MaterialShininess);
  if (diffuseLight0 <= 0) specularLight0 = 0;
  float4 specular0 = MaterialSpecular * Light0Specular * specularLight0;
  float3 H1 = normalize(L1 + V);
  float specularLight1 = pow(max(dot(H1, N), 0), MaterialShininess);
  if (diffuseLight1 <= 0) specularLight1 = 0;
  float4 specular1 = MaterialSpecular * Light1Specular * specularLight1;

  float4 color;
  color = ambient0 + ambient1 + diffuse0 + diffuse1 + specular0 + specular1;
  color *= tex2D(texture0, N);  
  
   // black hole
   float distance = length(blackHolePosition.xyz - P);
   if(distance < 0.01 * time){
     color.rgb = float3(0, 0, 0);
  }


  return color;  
}