// data interpolated from vertex program output
struct vertexIN
{
  float3 objectSpacePos : TEXCOORD1;
  float3 normal   : TEXCOORD2;
  float2 texCoord0   : TEXCOORD0;
};

// OpenGL state
uniform float4x4 ModelViewInverse : state.matrix.modelview.inverse;

uniform float4 Light0Position : state.light[0].position;
uniform float4 Light0Ambient : state.light[0].ambient;
uniform float4 Light0Diffuse : state.light[0].diffuse;
uniform float4 Light0Specular : state.light[0].specular;

uniform float4 Light1Position : state.light[1].position;
uniform float4 Light1Ambient : state.light[1].ambient;
uniform float4 Light1Diffuse : state.light[1].diffuse;
uniform float4 Light1Specular : state.light[1].specular;

uniform float4 MaterialAmbient : state.material.ambient;
uniform float4 MaterialDiffuse : state.material.diffuse;
uniform float4 MaterialSpecular : state.material.specular;
uniform float MaterialShininess : state.material.shininess;


float4 main(vertexIN vIn,
            uniform float4 blackHolePosition, 
            uniform float time,
            uniform sampler2D texture0 : TEX0) : COLOR
{
  //light calculation is done in object space (normals) 
  float3 P = vIn.objectSpacePos.xyz;
  float3 N = normalize(vIn.normal);

  //so we need to transform eye position 
  float3 ePos = (mul(ModelViewInverse, float4(0, 0, 0, 1))).xyz;
  
  
  float4 color;
  
  //light0
  {
	  //set lightPosition
	  float3 lPos = (mul(ModelViewInverse, Light0Position)).xyz;
	  //float3 lPos = ePos;
	
	  // compute ambient term
	  float4 ambient = MaterialAmbient * Light0Ambient;
	
	  // compute the diffuse term
	  float3 L = normalize(lPos.xyz - P);
	  float diffuseLight = max(dot(L, N), 0);
	  float4 diffuse = MaterialDiffuse * Light0Diffuse * diffuseLight;
	
	  // compute the specular term
	  float3 V = normalize(ePos - P);
	  float3 H = normalize(L + V);
	  float specularLight = pow(max(dot(H, N), 0), MaterialShininess);
	  if (diffuseLight <= 0) specularLight = 0;
	  float4 specular = MaterialSpecular * Light0Specular * specularLight;
  	color = ambient + diffuse + specular;  
  }
  //light1
  {
	  //set lightPosition
	  float3 lPos = (mul(ModelViewInverse, Light1Position)).xyz;
	  //float3 lPos = ePos;
	
	  // compute ambient term
	  float4 ambient = MaterialAmbient * Light1Ambient;
	
	  // compute the diffuse term
	  float3 L = normalize(lPos.xyz - P);
	  float diffuseLight = max(dot(L, N), 0);
	  float4 diffuse = MaterialDiffuse * Light1Diffuse * diffuseLight;
	
	  // compute the specular term
	  float3 V = normalize(ePos - P);
	  float3 H = normalize(L + V);
	  float specularLight = pow(max(dot(H, N), 0), MaterialShininess);
	  if (diffuseLight <= 0) specularLight = 0;
	  float4 specular = MaterialSpecular * Light1Specular * specularLight;
  	color += ambient + diffuse + specular;  
  }
  color *= tex2D(texture0, vIn.texCoord0);
  
  // black hole
  float distance = length(blackHolePosition.xyz - P);
  if(distance < 0.01 * time){
    color.rgb = float3(0, 0, 0);
  }

  return color;  
}